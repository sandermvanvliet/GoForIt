@model dynamic

@{
    ViewBag.Title = "Event log";
}
<style type="text/css">
    .event {
        border-color: #428bca;
        border-width: 2px;
    }

    .action {
        border-color: #449d44;
        border-width: 2px;
    }
</style>
<div class="row" id="bindingTarget">
    <div class="col-md-6">
        <h4>Events</h4>
        <ul class="list-group" data-bind="foreach:events">
            <li class="list-group-item event">
                <span data-bind="text:description"></span>
                <table>
                    <tbody data-bind="foreach:parameters">
                    <tr>
                        <td style="font-weight: bold" data-bind="text:name"></td>
                        <td data-bind="text:value"></td>
                    </tr>
                    </tbody>
                </table>
            </li>
        </ul>
    </div>
    <div class="col-md-6">
        <h4>Actions</h4>
        <ul class="list-group" data-bind="foreach:actions">
            <li class="list-group-item action">
                <span data-bind="text:description"></span>
                <table>
                    <tbody data-bind="foreach:parameters">
                    <tr>
                        <td style="font-weight: bold" data-bind="text:name"></td>
                        <td data-bind="text:value"></td>
                    </tr>
                    </tbody>
                </table>
            </li>
        </ul>
    </div>
</div>

<script type="text/javascript">
    var viewModel = new EventLogViewModel();

    ko.applyBindings(viewModel, document.getElementById("bindingTarget"));
</script>

<script type="text/javascript">
    var SomeEvent = function (data) {
        var self = this;

        self.description = ko.observable(data.Application);
        self.parameters = ko.observableArray([]);

        var items = Array();
        ko.utils.arrayForEach(data.Parameters, function (item) {
            items.push(new ParameterViewModel(item));
        });

        self.parameters(items);
    };

    $(function () {
        // Declare a proxy to reference the hub.
        var chat = $.connection.eventLogHub;

        chat.client.newEvent = function (event) {
            var data = JSON.parse(event);
            console.log(data);
            viewModel.events.unshift(new SomeEvent(data));
        };

        chat.client.newAction = function (action) {
            var data = JSON.parse(action);
            console.log(data);
            viewModel.actions.unshift(new SomeEvent(data));
        };

        // Start the connection.
        $.connection.hub.start().done(function () {
            console.log("hub started");
        });
    });
</script>
